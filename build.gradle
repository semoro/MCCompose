buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
    }
}
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.21"
    id "org.jetbrains.compose" version "0.3.0-build139"
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.0"
group = "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modid"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
//    version = "1.12.2-14.23.5.2854"
//    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenLocal()
    jcenter()
    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev") }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    compile "org.jetbrains.kotlin:kotlin-reflect:1.4.21"
}




dependencies {
    compile("org.jetbrains.skiko:skiko-jvm:0.1.999-SNAPSHOT")
    compile("org.jetbrains.skiko:skiko-jvm-runtime-linux-x64:0.1.999-SNAPSHOT")
//    compile("org.jetbrains.skija:skija-native:0.0.0-SNAPSHOT")
    compile(compose.desktop.currentOs)
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version//, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


jar {
    manifest.attributes(
            'FMLCorePluginContainsFMLMod': true,
            'FMLCorePlugin': 'com.example.examplemod.CoreModX'
    )
}